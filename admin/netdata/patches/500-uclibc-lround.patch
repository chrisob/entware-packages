--- a/src/rrd2json.c
+++ b/src/rrd2json.c
@@ -213,14 +213,22 @@ void rrd_stats_api_v1_charts_allmetrics_shell(RRDHOST *host, BUFFER *wb) {
                         buffer_sprintf(wb, "NETDATA_%s_%s=\"\"      # %s\n", chart, dimension, st->units);
                     else {
                         if(rd->multiplier < 0 || rd->divisor < 0) n = -n;
+#ifdef __UCLIBC__
+                        n = llround(n);
+#else
                         n = roundl(n);
+#endif
                         if(!rrddim_flag_check(rd, RRDDIM_FLAG_HIDDEN)) total += n;
                         buffer_sprintf(wb, "NETDATA_%s_%s=\"%0.0Lf\"      # %s\n", chart, dimension, n, st->units);
                     }
                 }
             }
 
+#ifdef __UCLIBC__
+            total = llround(total);
+#else
             total = roundl(total);
+#endif
             buffer_sprintf(wb, "NETDATA_%s_VISIBLETOTAL=\"%0.0Lf\"      # %s\n", chart, total, st->units);
             rrdset_unlock(st);
         }
@@ -243,7 +251,11 @@ void rrd_stats_api_v1_charts_allmetrics_shell(RRDHOST *host, BUFFER *wb) {
         if(isnan(n) || isinf(n))
             buffer_sprintf(wb, "NETDATA_ALARM_%s_%s_VALUE=\"\"      # %s\n", chart, alarm, rc->units);
         else {
+#ifdef __UCLIBC__
+            n = llround(n);
+#else
             n = roundl(n);
+#endif
             buffer_sprintf(wb, "NETDATA_ALARM_%s_%s_VALUE=\"%0.0Lf\"      # %s\n", chart, alarm, n, rc->units);
         }
 
--- a/src/statsd.c
+++ b/src/statsd.c
@@ -443,7 +443,11 @@ static inline void statsd_process_counter(STATSD_METRIC *m, const char *value, c
 
     if(unlikely(m->reset)) statsd_reset_metric(m);
 
+#ifdef __UCLIBC__
+    m->counter.value += llround((long double)statsd_parse_int(value, 1) / statsd_parse_float(sampling, 1.0));
+#else
     m->counter.value += roundl((long double)statsd_parse_int(value, 1) / statsd_parse_float(sampling, 1.0));
+#endif
 
     m->events++;
     m->count++;
@@ -1488,18 +1492,31 @@ static inline void statsd_flush_timer_or_histogram(STATSD_METRIC *m, const char
         long double *series = m->histogram.ext->values;
         sort_series(series, len);
 
+#ifdef __UCLIBC__
+        m->histogram.ext->last_min = (collected_number)llround(series[0] * STATSD_DECIMAL_DETAIL);
+        m->histogram.ext->last_max = (collected_number)llround(series[len - 1] * STATSD_DECIMAL_DETAIL);
+        m->last = (collected_number)llround(average(series, len) * STATSD_DECIMAL_DETAIL);
+        m->histogram.ext->last_median = (collected_number)llround(median_on_sorted_series(series, len) * STATSD_DECIMAL_DETAIL);
+        m->histogram.ext->last_stddev = (collected_number)llround(standard_deviation(series, len) * STATSD_DECIMAL_DETAIL);
+        m->histogram.ext->last_sum = (collected_number)llround(sum(series, len) * STATSD_DECIMAL_DETAIL);
+#else
         m->histogram.ext->last_min = (collected_number)roundl(series[0] * STATSD_DECIMAL_DETAIL);
         m->histogram.ext->last_max = (collected_number)roundl(series[len - 1] * STATSD_DECIMAL_DETAIL);
         m->last = (collected_number)roundl(average(series, len) * STATSD_DECIMAL_DETAIL);
         m->histogram.ext->last_median = (collected_number)roundl(median_on_sorted_series(series, len) * STATSD_DECIMAL_DETAIL);
         m->histogram.ext->last_stddev = (collected_number)roundl(standard_deviation(series, len) * STATSD_DECIMAL_DETAIL);
         m->histogram.ext->last_sum = (collected_number)roundl(sum(series, len) * STATSD_DECIMAL_DETAIL);
+#endif
 
         size_t pct_len = (size_t)floor((double)len * statsd.histogram_percentile / 100.0);
         if(pct_len < 1)
             m->histogram.ext->last_percentile = (collected_number)(series[0] * STATSD_DECIMAL_DETAIL);
         else
+#ifdef __UCLIBC__
+            m->histogram.ext->last_percentile = (collected_number)llround(average(series, pct_len) * STATSD_DECIMAL_DETAIL);
+#else
             m->histogram.ext->last_percentile = (collected_number)roundl(average(series, pct_len) * STATSD_DECIMAL_DETAIL);
+#endif
 
         debug(D_STATSD, "STATSD %s metric %s: min " COLLECTED_NUMBER_FORMAT ", max " COLLECTED_NUMBER_FORMAT ", last " COLLECTED_NUMBER_FORMAT ", pcent " COLLECTED_NUMBER_FORMAT ", median " COLLECTED_NUMBER_FORMAT ", stddev " COLLECTED_NUMBER_FORMAT ", sum " COLLECTED_NUMBER_FORMAT,
               dim, m->name, m->histogram.ext->last_min, m->histogram.ext->last_max, m->last, m->histogram.ext->last_percentile, m->histogram.ext->last_median, m->histogram.ext->last_stddev, m->histogram.ext->last_sum);
--- a/src/unit_test.c
+++ b/src/unit_test.c
@@ -994,7 +994,11 @@ int run_test(struct test *test)
     for(c = 0 ; c < max ; c++) {
         calculated_number v = unpack_storage_number(rd->values[c]);
         calculated_number n = test->results[c];
+#ifdef __UCLIBC__
+        int same = (llround(v * 10000000.0) == llround(n * 10000000.0))?1:0;
+#else
         int same = (roundl(v * 10000000.0) == roundl(n * 10000000.0))?1:0;
+#endif
         fprintf(stderr, "    %s/%s: checking position %lu (at %lu secs), expecting value " CALCULATED_NUMBER_FORMAT ", found " CALCULATED_NUMBER_FORMAT ", %s\n",
             test->name, rd->name, c+1,
             (rrdset_first_entry_t(st) + c * st->update_every) - time_start,
@@ -1005,7 +1009,11 @@ int run_test(struct test *test)
         if(rd2) {
             v = unpack_storage_number(rd2->values[c]);
             n = test->results2[c];
+#ifdef __UCLIBC__
+            same = (llround(v * 10000000.0) == llround(n * 10000000.0))?1:0;
+#else
             same = (roundl(v * 10000000.0) == roundl(n * 10000000.0))?1:0;
+#endif
             fprintf(stderr, "    %s/%s: checking position %lu (at %lu secs), expecting value " CALCULATED_NUMBER_FORMAT ", found " CALCULATED_NUMBER_FORMAT ", %s\n",
                 test->name, rd2->name, c+1,
                 (rrdset_first_entry_t(st) + c * st->update_every) - time_start,
